/*********************************************************************************************/
本文档使用 TAB = 4 对齐，使用keil5默认配置打开阅读比较方便。

【*】程序简介

-工程名称：W25Q64基本读写全程
-实验平台: 野火STM32 F103-指南者 开发板 
-ST固件库版本：3.5

【 ！】功能简介：
读写板载的SPI FLASH芯片。

学习目的：学习STM32的SPI驱动。

【 ！！】注意事项：

FLASH芯片出厂前已有烧录数据，具体见下文FLASH使用情况说明。
不要乱盖PC0跳帽！！

【 ！】实验操作：
电脑端使用串口调试助手，选择电脑与STM32相连的COM口，设置为115200-N-8-1，
复位开发板，即可接收STM32串口发送给电脑的调试信息。

/***************************************************************************************************************/

【 ！】外部Flash使用情况说明（W25Q64）	
		

|-------------------------------------------------------------------------------------------------------------------|												
|序号	|文件名/工程					|功能										|起始地址		|长度			|
|-------|---------------------------|-------------------------------------------|---------------|-------------------|
|1		|外部flash读写例程			|预留给裸机Flash测试							|0				|1024 (BYTE)		|
|-------|---------------------------|-------------------------------------------|---------------|-------------------|
|2		|裸机触摸屏例程				|裸机触摸校准参数							|1024			|2*1024(BYTE)		|
|-------|---------------------------|-------------------------------------------|---------------|-------------------|
|3		|裸机中文显示例程（旧版） 	|裸机中文字库（HZLIB.bin）					|4096			|53*4096 (212KB)	|
|-------|---------------------------|-------------------------------------------|---------------|-------------------|
|4		|emwin综合例程 app.c		    |XBF字库文件（emWin使用,songti.xbf）			|60*4096		|317*4096 (1.23MB)	|
|-------|---------------------------|-------------------------------------------|---------------|-------------------|
|5		|裸机中文显示例程（新版）		|裸机中文字库（GB2312_H1616.FON）			|387*4096		|64*4096 (256KB)	|
|-------|---------------------------|-------------------------------------------|---------------|-------------------|
|6		|emwin综合例程				|文件系统中文支持字库(emWin使用,UNIGBK.BIN)	|465*4096		|43*4096 (172KB)	|
|-------|---------------------------|-------------------------------------------|---------------|-------------------|
|7		|Touch_CalibrationApp.c		|电阻屏触摸校准参数（emWin使用）				|510*4096		|34 (BYTE)			|
|-------|---------------------------|-------------------------------------------|---------------|-------------------|
|8		|SPIFLASH FATFS例程			|FATFS文件系统								|512*4096		|1536*4096 (6MB)	|
|-------|---------------------------|-------------------------------------------|---------------|-------------------|


*FLASH芯片的第一个扇区（0-4096字节）是专门预留给本实验及裸机触摸做测试的，

 
*关于以上表格的更多说明请看库例程文件夹内《刷外部FLASH程序（刷资源文件在外部FLASH）》里的说明
 
/*******************************************************************************************************************/

【*】 引脚分配

FLASH(W25Q64)：
FLASH芯片的SPI接口与STM32的SPI1相连。
		SCK <--->PA5
		MISO<--->PA6
		MOSI<--->PA7
		CS  <--->PC0

串口(TTL-USB TO USART)：
CH340的收发引脚与STM32的发收引脚相连。
	CH340  RXD  <----->  USART1  TX  (PA9)
	CH340  TXD  <----->  USART1  RX  (PA10)												

/*******************************************************************************************************************/
【*】程序描述：

< bsp_spi_ flash.h >

宏定义FLASH相关

	1.宏定义FLASH的ID，FLASH的页大小
	2.用宏定义封装好FLASH的常见指令编码

	PS：“dummy”指该处可为任意数据

宏定义SPI相关的接口
	
	1.宏定义使用的SPI编号，时钟，封装对应的时钟函数
	2.宏定义SPI引脚所使用的时钟、GPIO编号、GPIO端口，封装对应的时钟函数
	3.定义了控制CS(即SPI的NSS脚) 引脚输出电平的宏，以便配置产生起始和停止信号时使用

封装常用的状态

	1.宏定义等待超时时间、常用的输出信息及FLASH状态
	
	
< bsp_spi_flash.c >

声明变量和函数

配置FLASH的SPI

	（初始化 SPI 的GPIO）
	1.引用结构体
	2.使能SPI及SPI引脚相关的时钟
	3.配置SPI的引脚对应的GPIO，CS脚为推挽输出，SCK、MISO、MOSI引脚为复用推免输出
	4.按照上方的配置，初始化SPI的GPIO，然后让CS引脚呈现高电平

	（配置 SPI 的模式）
	4.此结构体在1.处引用了
	5.根据FLASH芯片支持的模式，把 STM32 的 SPI 外设配置为主机端，双线全双工模式，
	   数据帧长度为 8 位，使用 SPI 模式 3(CPOL=1，CPHA=1)，NSS 引脚由软件控制以及MSB先行模式，
	   分频为4分频，此处的CRC计算式的成员值是无效的，因为程序中并没有使能SPI的CRC功能
	6.按照上方的配置，初始化SPI模式，然后使能SPI

擦除FLASH扇区
	
	1.发送 FLASH 写使能命令，然后等待FLASH内部数据写入完毕
	2.CS脚置低电平开启传输
	3.向FLASH发送扇区擦除指令，然后发送3个字节用于表示要擦除的存储矩阵地址，注意高位在前
	4.CS脚置高电平关闭传输
	5.等待FLASH内部数据擦除完毕
	

对FLASH按页写入数据

	1.发送FLASH写使能命令
	2.CS置低开启通讯，然后发送页写入指令
	3.发送要写入的地址，注意高位在前
	4.当要写入的字节数大于页大小，则把写入的字节数改成页大小然后报错
	5.向FLASH写入数据
	6.停止通讯，等待写入完成

不定量数据写入

	1.定义要写的整页数NumOfPage，数据写完整数页后不足一页的数目NumOfSingle，地址是否为页的整数倍判断值Addr，
	  补齐剩下地址为一页的数目count，NumOfSingle填满count后多出的数据长度temp

	2.计算地址是否为整页数

		是――判断要写入的数据是否超过一页
		否----利用页写入写完整页
		是----利用循环页写入写完要写的页数，每写完一页，增加写入的地址与指针，
		         当写完要写的页数后，利用页写入把剩下不足一页的数目写完。

		否――判断要写入的数据是否超过一页
		否――判断要写入的地址是否超过count的数量
		是----把地址所在的多出但不足一页的那页写完，然后地址与指针增加count，再把剩下要写入的temp个数据写入
		否----把地址所在的多出但不足一页的那页写完
		是----计算把count所在那页填完后，对应的NumOfPage和NumOfSingle
		         把count所在页利用页写入填完，然后地址与指针增加count，
		         把要写入的整页数利用页写入填完，地址和指针随之增加，
		         当还有多余的不满一页的数据，利用页写入把它写完。

	PS：调用本函数写入数据前需要先擦除扇区

读取FLASH的数据

	1.CS置低开启通讯，然后发送读取指令
	2.发送要读的地址，注意高位在前
	3.利用库函数从FLASH中一个字节一个字节的读取函数
	4.停止通讯

读FLASH的设备地址

	1.CS脚置低电平开始传输
	2.向FLASH发送读取ID指令
	3.读三个字节，把读到的字节分别存放在不同的变量中，然后断开通讯
	4.把读到的数据按顺序组合起来，放进temp中
	5.本函数返回temp的值

使用SPI读取一个字节的数据
	
	1.调用库函数SendByte函数发送数据“Dummy_Byte”， 然后获取其返回值

使用SPI发送一个字节的数据

	1.设定超时等待时间
	2.监测TXE事件，检测何时发送缓冲区为空，如果检测时间长于超时等待时间，则返回提示信息
	3.把要写入的数据写入发送缓冲区
	4.设定超时等待时间
	5.监测RXNE事件，检测何时接收缓冲区为空，如果检测时间长于超时等待时间，则返回提示信息
	6.读取数据寄存器，获取接收缓冲区数据
										
使用SPI发送两个字节的数据
	
	1.与上面函数一样

向FLASH发送“写使能”命令

	1.控制CS脚开启通讯，用SPI向FLASH发送写使能命令，然后结束通讯

等待FLASH内部数据写入完毕

	1.控制CS脚开启通讯，用SPI向FLASH发送 读状态寄存器 命令
	2.当出现了BUSY位为0时，则读取FLASH芯片的状态寄存器
	3.结束通讯

等待超时回调函数

	1.当超时后，输出对应的错误信息



<main.c>

	1.初始化LED
	2.初始化串口，然后向串口输出提示信息
	3.初始化FLASH的SPI
	4.获取FLASH和SPI的ID，向串口输出提示信息
	5.当获取的FLASHID和我们定义的ID相同，则在擦除对应扇区后写入数据，把写入的数据读出来放到接收缓冲区中，
	  然后比较写入和读出的数据，输出对应的提示信息；当获取的FLASHID和我们定义的ID不同，输出对应的提示信息
			
/*********************************************************************************************/

【*】 联系我们

-野火官网  :https://embedfire.com
-野火论坛  :http://www.firebbs.cn
-野火商城  :https://yehuosm.tmall.com/
-野火资料下载中心 :http://doc.embedfire.com/products/link

/*********************************************************************************************/